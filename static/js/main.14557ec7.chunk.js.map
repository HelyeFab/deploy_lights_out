{"version":3,"sources":["helpers/helperFuns.js","components/Cell.jsx","components/Board.jsx","App.js","index.js"],"names":["exports","randomlyLit","Math","floor","random","cellIdentifier","arr","length","i","push","Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","isLit","console","log","coords","react_default","a","createElement","className","onClick","Component","Board","state","board","createBoard","hasWon","y","nrows","row","x","ncols","coord","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","flipCell","every","cell","setState","_this2","tblBoard","_loop","concat","components_Cell","key","flipCellsAround","defaultProps","chanceLightStartOn","App","components_Board","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.14557ec7.chunk.js","sourcesContent":["exports.randomlyLit = function(){\n    if(Math.floor(Math.random() * 2) === 1)\n    { return true} else {\n        return false\n    }\n\n}\n\n\n\nexports.cellIdentifier = function(arr, length){\n   for(let i=0; i<length; i++){\n       arr.push(i+1)\n   }\n   return arr\n}\n\n\n\n// Math.floor(Math.random() * 2)","import React, {Component} from 'react'\nimport \"../styles/Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n   \n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n    console.log(this.props.coords);\n   \n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport { randomlyLit } from '../helpers/helperFuns';\nimport '../styles/Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps={\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartOn: 0.25\n  }\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state={\n      board: this.createBoard(),\n      hasWon: false\n    }\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for(let y=0; y<this.props.nrows; y++){\n      let row = [];\n      for(let x=0; x<this.props.ncols; x++){\n        row.push(randomlyLit());\n      }\n      board.push(row);\n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    console.log('Flipping', coord);\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y, x)\n    flipCell(y, x-1)\n    flipCell(y, x+1)\n    flipCell(y -1, x)\n    flipCell(y +1, x)\n\n    // win when every cell is turned off\n\n\n    let hasWon=board.every(row =>row.every(cell=> !cell))\n\n    this.setState({\n      board, \n      hasWon: hasWon\n    });\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    // if the game is won, just show a winning msg & render nothing else\n    if(this.state.hasWon){\n      return    <h1 className=\"neon\">You <span className=\"flux\">WON!!!</span></h1>\n    }\n\n \n\n    // make table board\n    let tblBoard =[]\n    for(let y=0; y<this.props.nrows; y++){\n      let row=[]\n      for(let x= 0; x<this.props.ncols; x++){\n        let coord=`${y}-${x}`\n        row.push(<Cell key={coord}  coords={coord} isLit={this.state.board[y][x]} flipCellsAroundMe={()=>this.flipCellsAround(coord)}/>);\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>)\n\n    }\n\n    return(\n      <div>\n      <h1 className=\"neon\">\n          Light <span className=\"flux\">Out</span>\n        </h1>\n      <table className=\"Board\">\n        <tbody>\n        {tblBoard}\n        </tbody>\n      </table>\n\n      </div>\n    )\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./components/Board\";\nimport \"./styles/App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}